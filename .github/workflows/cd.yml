name: CD

on:
  push:
    branches: [ main, master ]
    paths:
      - 'mon-backend-app/**'
      - '.github/workflows/cd.yml'
  workflow_dispatch:

jobs:
  build-and-push-image:
    name: Build and Push Docker Image (GHCR)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/communalis-api
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME || github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: mon-backend-app
          file: mon-backend-app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to VPS (docker-compose)
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -euo pipefail
            APP_DIR=${{ secrets.VPS_APP_DIR }}
            IMAGE=ghcr.io/${{ github.repository_owner }}/communalis-api:latest
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Write compose file if not present (optional safety)
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml not found in $APP_DIR; please sync repo or upload files." && exit 1
            fi

            # Pull latest image and restart
            docker login ghcr.io -u ${{ secrets.GHCR_USERNAME || github.repository_owner }} -p ${{ secrets.GHCR_TOKEN }}
            IMAGE=$IMAGE docker compose pull api || true
            IMAGE=$IMAGE docker compose up -d --remove-orphans

            # Cleanup old images
            docker image prune -af || true
